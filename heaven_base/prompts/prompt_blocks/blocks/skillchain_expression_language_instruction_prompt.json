{
    "name": "skillchain_expression_language_instruction_prompt",
    "text": "\nSkillchain Expression Language: Rules and Syntax\n-------------------------------------------------\n\nThe Skillchain Expression Language provides a concise way to describe complex, multi-step workflows using agents, tools, and emoji variables. It is designed for clarity, modularity, and easy parsing by both humans and LLMs.\n\nRules:\n- Emoji Assignment: Assign any agent or tool to an emoji variable using `emoji = entity_name` at the start of the skillchain, with no curly braces.\n- Tool Calls: Use `>>` to represent an agent or tool invoking another tool/entity or performing an action.\n- Return Values: Use `=` to bind the output of a call to a variable or to indicate a result.\n- Final Output: Use `==>` to indicate the final output of the workflow.\n- Loops: Use `\ud83d\udd01` before a block to indicate a loop, with variables inside the loop. The variable in the parentheses is available in the loop's body.\n- Unique Tools: Differentiate multiple tool instances with emoji suffixes like `\ud83d\udee0\ufe0f_1`, `\ud83d\udee0\ufe0f_2`, etc.\n- Variable Usage: Variables can be referenced in calls, including within loops. Any variable created as a result in a previous step (e.g., `result_var`) may be used as an argument in subsequent steps, including when calling a different agent or chain. This allows agents and chains to pass outputs to each other explicitly.\n- Hierarchy/Swarm: Use distinct emojis for orchestrators, managers, workers, etc. Assign these as variables with the same syntax.\n- All assignments and calls must use valid emoji variables previously defined in the chain.\n- No undefined variables or duplicate emoji variable assignments allowed.\n- All tool/entity names must map to a known set of agents/tools.\n- The expression must end with a final return (`==>`).\n",
    "domain": "agent_orchestration",
    "subdomain": "skillchain_expression_language"
}